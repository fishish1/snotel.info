name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # ACM certificate for EDGE endpoints must be in us-east-1

      - name: Deploy static site to S3
        run: |
          aws s3 sync public/ s3://snotel.info

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Create and upload Lambda layers
        run: |
          echo "=== Creating Lambda layer zip files ==="
          
          # Check if lambda directory exists
          if [ ! -d "lambda" ]; then
            echo "Lambda directory not found, skipping layer creation"
            exit 0
          fi
          
          # Find all directories that might contain dependencies
          find lambda -mindepth 1 -maxdepth 2 -type d | while read dir; do
            funcname=$(basename "$dir")
            
            # Skip if it's a nested directory we don't want to process
            if [[ "$dir" == *"/"*"/"* ]] && [[ "$funcname" != "generateState" ]] && [[ "$funcname" != "getState" ]] && [[ "$funcname" != "getHourly" ]]; then
              continue
            fi
            
            # Only process our specific function directories
            if [[ "$funcname" == "generateState" ]] || [[ "$funcname" == "getState" ]] || [[ "$funcname" == "getHourly" ]]; then
              echo "=== Processing function: $funcname ==="
              
              cd "$dir"
              if [ -d "node_modules" ] || [ -f "package.json" ] || [ -f "index.js" ]; then
                echo "Creating zip for $funcname layer"
                zip -r "${funcname}.zip" .
                
                echo "Uploading ${funcname}.zip to S3"
                aws s3 cp "${funcname}.zip" "s3://snotel.info.backend/layers/${funcname}.zip"
                
                echo "SUCCESS: Uploaded layer for $funcname"
              else
                echo "No dependencies found for $funcname, skipping"
              fi
              cd - > /dev/null
            fi
          done

      - name: Build and Deploy Lambdas with SAM
        run: |
          sam build --template-file cloudformation/lambdafunctions
          sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --stack-name snotel-info-stack --capabilities CAPABILITY_IAM --parameter-overrides CertificateArn=${{ secrets.AWS_CERTIFICATE_ARN }} LambdaExecutionRoleArn=${{ secrets.LAMBDA_EXECUTION_ROLE_ARN }} --s3-bucket snotel.info.backend --template-file cloudformation/lambdafunctions