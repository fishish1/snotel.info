AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Snotel.info backend with Lambda functions and layers.

Parameters:
  Stage:
    Type: String
    Default: prod
    Description: The deployment stage (e.g., prod, test).
    AllowedValues:
      - prod
      - test
  NodeRuntime:
    Type: String
    Default: nodejs22.x
    Description: The NodeJS runtime for the Lambda functions.
  DomainName:
    Type: String
    Default: api.snotel.info
    Description: The custom domain name for the API Gateway.
  CertificateArn:
    Type: String
    Description: The ARN of the ACM certificate for the custom domain (must be in us-east-1).

Mappings:
  StageVariablesMap:
    prod:
      corshost: "'https://snotel.info'"
    test:
      corshost: "'https://localhost:4200'"

Globals:
  Function:
    Timeout: 10
    Runtime: !Ref NodeRuntime
    MemorySize: 128

Resources:
  # IAM Roles
  BasicLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: S3ReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 's3:GetObject'
                Resource: 'arn:aws:s3:::snotel.info/*'
              - Effect: Allow
                Action: 's3:ListBucket'
                Resource: 'arn:aws:s3:::snotel.info'

  WriteLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: S3WriteAccessToAssets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                Resource: 'arn:aws:s3:::snotel.info/assets/*'

  # Per Function Lambda Layers
  GenerateStateLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: GenerateStateDependencies
      Description: Dependencies for generateState
      ContentUri: ../lambda/generateState
      CompatibleRuntimes:
        - !Ref NodeRuntime
    Metadata:
      BuildMethod: nodejs22.x

  GetStateLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: GetStateDependencies
      Description: Dependencies for getState
      ContentUri: ../lambda/getState
      CompatibleRuntimes:
        - !Ref NodeRuntime
    Metadata:
      BuildMethod: nodejs22.x

  GetHourlyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: GetHourlyDependencies
      Description: Dependencies for getHourly
      ContentUri: ../lambda/getHourly
      CompatibleRuntimes:
        - !Ref NodeRuntime
    Metadata:
      BuildMethod: nodejs22.x

  # Lambda function for generateState
  GenerateStateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: generateState
      CodeUri: ../lambda/generateState
      Handler: index.handler # Assumes index.js exports a 'handler' function
      Layers:
        - !Ref GenerateStateLayer
      Role: !GetAtt WriteLambdaExecutionRole.Arn
      # This function does not have an API Gateway trigger so can only be invoked directly

  # Lambda function for getState
  GetStateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getState
      CodeUri: ../lambda/getState
      Handler: index.handler
      Layers:
        - !Ref GetStateLayer
      Role: !GetAtt BasicLambdaExecutionRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /state/{state}
            Method: get
            Cors:
              AllowMethods: "'GET,OPTIONS'"
              AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              AllowOrigin: !FindInMap [StageVariablesMap, !Ref Stage, corshost]
            Domain:
              DomainName: !Ref DomainName
              CertificateArn: !Ref CertificateArn
              EndpointConfiguration: EDGE

  # Lambda function for getHourly
  GetHourlyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getHourly
      CodeUri: ../lambda/getHourly
      Handler: index.handler
      Layers:
        - !Ref GetHourlyLayer
      Role: !GetAtt BasicLambdaExecutionRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /hourly/{stationTriplet}
            Method: get
        ApiEventWithElement:
          Type: Api
          Properties:
            Path: /hourly/{stationTriplet}/{element}
            Method: get