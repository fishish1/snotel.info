AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Snotel.info backend with Lambda functions and layers.

Parameters:
  NodeRuntime:
    Type: String
    Default: nodejs22.x
    Description: The NodeJS runtime for the Lambda functions.
  DomainName:
    Type: String
    Default: api.snotel.info
    Description: The custom domain name for the API Gateway.
  CertificateArn:
    Type: String
    Description: The ARN of the ACM certificate for the custom domain (must be in us-east-1).
  ApiStageName:
    Type: String
    Default: prod
    Description: The stage name for the API Gateway.
    AllowedValues:
      - prod
      - test

Globals:
  Function:
    Timeout: 10
    Runtime: !Ref NodeRuntime
    MemorySize: 128

Conditions:
  IsProdStage: !Equals [!Ref ApiStageName, 'prod']

Resources:
  # IAM Roles
  BasicLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: S3ReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 's3:GetObject'
                Resource: 'arn:aws:s3:::snotel.info/*'
              - Effect: Allow
                Action: 's3:ListBucket'
                Resource: 'arn:aws:s3:::snotel.info'

  SchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: InvokeLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: !GetAtt GenerateStateFunction.Arn

  WriteLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: S3WriteAccessToAssets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                Resource: 'arn:aws:s3:::snotel.info/assets/*'

  # Per Function Lambda Layers
  GenerateStateLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: GenerateStateDependencies
      Description: Dependencies for generateState
      ContentUri: ../lambda/generateState
      CompatibleRuntimes:
        - !Ref NodeRuntime
    Metadata:
      BuildMethod: nodejs22.x

  GetStateLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: GetStateDependencies
      Description: Dependencies for getState
      ContentUri: ../lambda/getState
      CompatibleRuntimes:
        - !Ref NodeRuntime
    Metadata:
      BuildMethod: nodejs22.x

  GetHourlyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: GetHourlyDependencies
      Description: Dependencies for getHourly
      ContentUri: ../lambda/getHourly
      CompatibleRuntimes:
        - !Ref NodeRuntime
    Metadata:
      BuildMethod: nodejs22.x

  # Lambda function for generateState
  GenerateStateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: generateState
      CodeUri: ../lambda/generateState
      Handler: index.handler # Assumes index.js exports a 'handler' function
      Timeout: 140
      Layers:
        - !Ref GenerateStateLayer
      Role: !GetAtt WriteLambdaExecutionRole.Arn
      # This function does not have an API Gateway trigger so can only be invoked directly

  # Lambda function for getState
  GetStateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getState
      CodeUri: ../lambda/getState
      Handler: index.handler
      Layers:
        - !Ref GetStateLayer
      Role: !GetAtt BasicLambdaExecutionRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /state/{state}
            Method: get
            RestApiId: !Ref SnotelApi

  # Lambda function for getHourly
  GetHourlyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getHourly
      CodeUri: ../lambda/getHourly
      Handler: index.handler
      Layers:
        - !Ref GetHourlyLayer
      Role: !GetAtt BasicLambdaExecutionRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /hourly/{stationTriplet}
            Method: get
            RestApiId: !Ref SnotelApi
        ApiEventWithElement:
          Type: Api
          Properties:
            Path: /hourly/{stationTriplet}/{element}
            Method: get
            RestApiId: !Ref SnotelApi

  # EventBridge Schedules
  GenerateStateScheduleCO:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: GenerateStateCO
      Description: 'Schedule to trigger GenerateState function for Colorado at midnight local time'
      ScheduleExpression: 'cron(0 0 * * ? *)'
      ScheduleExpressionTimeZone: 'America/Denver'
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt GenerateStateFunction.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
        Input: '{"state": "CO"}'

  GenerateStateScheduleWA:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: GenerateStateWA
      Description: 'Schedule to trigger GenerateState function for Washington at midnight local time'
      ScheduleExpression: 'cron(0 0 * * ? *)'
      ScheduleExpressionTimeZone: 'America/Los_Angeles'
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt GenerateStateFunction.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
        Input: '{"state": "WA"}'

  GenerateStateScheduleUT:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: GenerateStateUT
      Description: 'Schedule to trigger GenerateState function for Utah at midnight local time'
      ScheduleExpression: 'cron(0 0 * * ? *)'
      ScheduleExpressionTimeZone: 'America/Denver'
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt GenerateStateFunction.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
        Input: '{"state": "UT"}'

  GenerateStateScheduleCA:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: GenerateStateCA
      Description: 'Schedule to trigger GenerateState function for California at midnight local time'
      ScheduleExpression: 'cron(0 0 * * ? *)'
      ScheduleExpressionTimeZone: 'America/Los_Angeles'
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt GenerateStateFunction.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
        Input: '{"state": "CA"}'

  GenerateStateScheduleAK:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: GenerateStateAK
      Description: 'Schedule to trigger GenerateState function for Alaska at midnight local time'
      ScheduleExpression: 'cron(0 0 * * ? *)'
      ScheduleExpressionTimeZone: 'America/Anchorage'
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt GenerateStateFunction.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
        Input: '{"state": "AK"}'

  GenerateStateScheduleWY:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: GenerateStateWY
      Description: 'Schedule to trigger GenerateState function for Wyoming at midnight local time'
      ScheduleExpression: 'cron(0 0 * * ? *)'
      ScheduleExpressionTimeZone: 'America/Denver'
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt GenerateStateFunction.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
        Input: '{"state": "WY"}'

  GenerateStateScheduleMT:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: GenerateStateMT
      Description: 'Schedule to trigger GenerateState function for Montana at midnight local time'
      ScheduleExpression: 'cron(0 0 * * ? *)'
      ScheduleExpressionTimeZone: 'America/Denver'
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt GenerateStateFunction.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
        Input: '{"state": "MT"}'

  GenerateStateScheduleOR:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: GenerateStateOR
      Description: 'Schedule to trigger GenerateState function for Oregon at midnight local time'
      ScheduleExpression: 'cron(0 0 * * ? *)'
      ScheduleExpressionTimeZone: 'America/Los_Angeles'
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt GenerateStateFunction.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
        Input: '{"state": "OR"}'

  GenerateStateScheduleAZ:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: GenerateStateAZ
      Description: 'Schedule to trigger GenerateState function for Arizona at midnight local time'
      ScheduleExpression: 'cron(0 0 * * ? *)'
      ScheduleExpressionTimeZone: 'America/Phoenix'
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt GenerateStateFunction.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
        Input: '{"state": "AZ"}'

  GenerateStateScheduleNM:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: GenerateStateNM
      Description: 'Schedule to trigger GenerateState function for New Mexico at midnight local time'
      ScheduleExpression: 'cron(0 0 * * ? *)'
      ScheduleExpressionTimeZone: 'America/Denver'
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt GenerateStateFunction.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
        Input: '{"state": "NM"}'

  GenerateStateScheduleNV:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: GenerateStateNV
      Description: 'Schedule to trigger GenerateState function for Nevada at midnight local time'
      ScheduleExpression: 'cron(0 0 * * ? *)'
      ScheduleExpressionTimeZone: 'America/Los_Angeles'
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt GenerateStateFunction.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
        Input: '{"state": "NV"}'

  GenerateStateScheduleID:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: GenerateStateID
      Description: 'Schedule to trigger GenerateState function for Idaho at midnight local time'
      ScheduleExpression: 'cron(0 0 * * ? *)'
      ScheduleExpressionTimeZone: 'America/Boise'
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt GenerateStateFunction.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
        Input: '{"state": "ID"}'

  SnotelApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref ApiStageName
      Cors:
        AllowMethods: "'GET,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'${stageVariables.corshost}'"
      Variables:
        corshost: !If [IsProdStage, 'https://snotel.info', 'http://localhost:4200']
      Domain:
        DomainName: !Ref DomainName
        CertificateArn: !Ref CertificateArn
        EndpointConfiguration: EDGE